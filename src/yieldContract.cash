pragma cashscript ^0.6.3;

// It's a contract to pay reward tokens automatically if you pay to the premium address
// which is a normal P2PKH address. For more advanced use cases we can replace the premium 
// address with another contract that would return the money or any other use cases
// also simulated state can be used to put a cap on the maximum amount of minted tokens
// however it will cause the contract address to change on every transaction
contract Yield(bytes20 premiumPkh, bytes tokenIdHex) {
    function farm(pubkey farmerPk, sig s, int premium) {
      require(checkSig(s, farmerPk));

      // minimum amount of premium to be paid in order to farm the yield
      int minPremium = 1000;
      int satsToBeMinted = 546;
      int satsLockedInForBaton = 546;

      require(premium >= minPremium);
 
      bytes opReturnOut = new OutputNullData([
        0x534c5000, // Lokad ID for SLP
        0x01,
        bytes('MINT'),
        tokenIdHex,
        0x03, // minting baton vout (very important to avoid burning the baton)
        0x00000000000186A0 // mint 1000 new tokens (considering 2 decimals)
        // 0x00000002540BE400 // 100 tokens (considering 8 decimals)
      ]);

      // minted token sent back to the farmer
      bytes34 out1 = new OutputP2PKH(bytes8(satsToBeMinted), hash160(farmerPk));
      // investment to the premium in order to farm
      bytes34 out2 = new OutputP2PKH(bytes8(premium), premiumPkh);
      // minting baton should be sent back to the contract
      bytes32 out3 = new OutputP2SH(bytes8(satsLockedInForBaton), hash160(tx.bytecode));

      require(hash256(opReturnOut + out1 + out2 + out3) == tx.hashOutputs);
    }
}